{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","reportWebVitals.js","index.js"],"names":["NavBar","totalCounters","className","xmlns","width","height","fill","viewBox","d","Counter","isNameEmpty","this","props","counter","name","type","value","onChange","e","onNameChange","getBadgeClasses","formatCount","onClick","onIncrement","onDelete","id","Component","Counters","onAdd","counters","map","App","state","handleNameChange","target","index","indexOf","setState","handleIncrement","handleAdd","maxId","Math","max","apply","x","push","handleDelete","counterId","console","log","filter","c","Fragment","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.de7a681c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../index.css\";\r\n//This is a stateless functional component\r\n\r\nconst NavBar = ({ totalCounters }) => {\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-dark\">\r\n      <h2 className=\"text-white center-item\">Shopping List</h2>\r\n\r\n      <span className=\"badge badge-pill badge-dark total-count\">\r\n        {totalCounters}\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"20\"\r\n          height=\"20\"\r\n          fill=\"currentColor\"\r\n          className=\"bi bi-cart2 float-right m-left\"\r\n          viewBox=\"0 0 16 16\"\r\n        >\r\n          <path d=\"M0 2.5A.5.5 0 0 1 .5 2H2a.5.5 0 0 1 .485.379L2.89 4H14.5a.5.5 0 0 1 .485.621l-1.5 6A.5.5 0 0 1 13 11H4a.5.5 0 0 1-.485-.379L1.61 3H.5a.5.5 0 0 1-.5-.5zM3.14 5l1.25 5h8.22l1.25-5H3.14zM5 13a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0zm9-1a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0z\" />\r\n        </svg>\r\n      </span>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport \"../style/style.css\";\r\nclass Counter extends Component {\r\n  render() {\r\n    const isNameEmpty = (this.props.counter.name ===\"\");\r\n    return (\r\n      <div className=\"counter-width\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control text-box d-inline m-2\"\r\n          value={this.props.counter.name}\r\n          onChange={(e) => this.props.onNameChange(this.props.counter,e)}\r\n        ></input>\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)} //the onClick handler cannot be a direct reference to a function. To solve this, recreate it as an arrow function\r\n          className=\"btn btn-danger btn-sm m-2 d-inline\"\r\n        >\r\n         X\r\n        </button>\r\n        {isNameEmpty && <p className=\"text-danger error-msg d-inline m-2\">Please enter an item name.</p>}\r\n          \r\n        \r\n      </div>\r\n    );\r\n  }\r\n  getBadgeClasses() {\r\n    return this.props.counter.value === 0\r\n      ? \"badge m-2 num-items badge-warning\"\r\n      : \"badge m-2 num-items badge-primary\";\r\n  }\r\n\r\n  formatCount() {\r\n    const { value } = this.props.counter; // gets this.props.counter.value and assigns it to a local value variable\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n\r\n  render() {\r\n      const {onAdd, counters, onDelete, onIncrement, onNameChange} = this.props;\r\n    return (\r\n      <div className=\"center-item\">\r\n        <button\r\n        onClick={onAdd}\r\n        className=\"btn btn-primary btn-sm m-2\">Add Item</button>\r\n\r\n\r\n        {counters.map((counter) => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            onNameChange={onNameChange}\r\n            counter={counter}\r\n            //Instead of this, pass the entire counter as a props so \r\n            //that if the Counter objec changes in the future, it is also reflected in this parent\r\n            //value={counter.value}\r\n            //id={counter.id}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, name: \"\", value: 0 },\n      { id: 2, name: \"\", value: 0 },\n      { id: 3, name: \"\", value: 0 },\n    ],\n  };\n\n  handleNameChange = (counter, e) =>{\n    const name = e.target.value;\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index].name = name;\n    this.setState({ counters });\n  }\n\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    if(counter.name===\"\"){\n      counters[index].value =0;//Empty name means a count of 0\n    }\n    else{\n      counters[index].value++;\n    }\n    \n    this.setState({ counters });\n  };\n\n  handleAdd = () =>{\n    const counters = this.state.counters;\n    const maxId = Math.max.apply(Math, counters.map(x => x.id));\n    counters.push({id: (maxId+1), name:\"\", value: 0});\n\n    this.setState({counters});\n  }\n\n  // handleReset = () => {\n  //   const counters = this.state.counters.map((c) => {\n  //     c.value = 0;\n  //     return c;\n  //   });\n  //   this.setState({ counters });\n  // };\n\n  handleDelete = (counterId) => {\n    console.log(\"Event Handler Called\", counterId);\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters: counters });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar totalCounters={this.state.counters.filter(c => c.value >0).length} />\n        <main className=\"container\">\n          <div className=\"row\">\n            <div className=\"col justify-content-center\">\n            <Counters\n            counters={this.state.counters}\n            onAdd = {this.handleAdd}\n            // onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n            onNameChange={this.handleNameChange}\n          />\n            </div>\n          </div>\n\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}